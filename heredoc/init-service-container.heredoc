#!/bin/bash
#
# HEREDOC Installation Method for init-service-container.sh
#
# This file contains commands you can copy/paste directly into the Proxmox LXC console
# as root to create and run the initialization script without needing file transfer.
#
# Usage:
#   1. Open this file in a text editor
#   2. Copy EVERYTHING from "cat > /usr/local/sbin..." to the end
#   3. Paste into the Proxmox console (logged in as root)
#   4. The script will be created, made executable, and ready to run
#
# Then run: /usr/local/sbin/init-service-container.sh
#

cat > /usr/local/sbin/init-service-container.sh << 'END_OF_INIT_SCRIPT'
#!/bin/bash

# Service Container Initialization Script
# This script performs the initial setup of a fresh Debian 13 LXC container
# to prepare it as a base template for running containerized services.
#
# Run this FIRST on a clean Debian 13 installation before other setup scripts.

set -e

GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[1;34m'
NC='\033[0m'

# --- Safety Checks ---
if [ "$(id -u)" -ne 0 ]; then
  echo -e "${RED}This script must be run as root. Please use 'sudo' or run as root.${NC}" >&2
  exit 1
fi

# Check if running Debian
if [ ! -f /etc/debian_version ]; then
  echo -e "${RED}Error: This script is designed for Debian systems.${NC}" >&2
  exit 1
fi

echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${BLUE}   Service Container - Initial Setup${NC}"
echo -e "${BLUE}   Debian $(cat /etc/debian_version)${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}\n"

# --- Configuration ---
ADMIN_USER="admin"

echo -e "${YELLOW}This script will:${NC}"
echo -e "  1. Update the system"
echo -e "  2. Install core packages (sudo, openssh-server)"
echo -e "  3. Create admin user with passwordless sudo"
echo -e "  4. Configure bash aliases"
echo -e "  5. Set up SSH for secure access"
echo ""

read -p "Continue with initialization? [Y/n]: " CONFIRM
if [[ "$CONFIRM" =~ ^[Nn]$ ]]; then
  echo -e "${YELLOW}Aborted.${NC}"
  exit 0
fi

# ============================================================================
# STEP 1: System Update
# ============================================================================

echo -e "\n${BLUE}──── Step 1: Updating System ────${NC}"
export DEBIAN_FRONTEND=noninteractive

echo "Running apt update..."
apt update

echo "Running apt upgrade..."
apt upgrade -y

echo -e "${GREEN}✓ System updated successfully${NC}"

# ============================================================================
# STEP 2: Install Core Packages
# ============================================================================

echo -e "\n${BLUE}──── Step 2: Installing Core Packages ────${NC}"

# Core packages needed for administration
PACKAGES=(
  sudo
  openssh-server
  curl
  wget
  ca-certificates
  gnupg
  lsb-release
)

echo "Installing: ${PACKAGES[*]}"
apt install -y "${PACKAGES[@]}"

echo -e "${GREEN}✓ Core packages installed${NC}"

# ============================================================================
# STEP 3: Create Admin User
# ============================================================================

echo -e "\n${BLUE}──── Step 3: Creating Admin User ────${NC}"

# Check if admin user already exists
if id "$ADMIN_USER" &>/dev/null; then
  echo -e "${YELLOW}User '${ADMIN_USER}' already exists. Skipping creation.${NC}"
else
  echo "Creating user '${ADMIN_USER}'..."

  # Create user with home directory
  useradd -m -s /bin/bash -c "System Administrator" "$ADMIN_USER"

  # Set password
  echo -e "\n${YELLOW}Please set a password for user '${ADMIN_USER}':${NC}"
  passwd "$ADMIN_USER"

  echo -e "${GREEN}✓ User '${ADMIN_USER}' created${NC}"
fi

# ============================================================================
# STEP 4: Configure Passwordless Sudo
# ============================================================================

echo -e "\n${BLUE}──── Step 4: Configuring Passwordless Sudo ────${NC}"

SUDOERS_FILE="/etc/sudoers.d/90-admin-nopasswd"

if [ -f "$SUDOERS_FILE" ]; then
  echo -e "${YELLOW}Sudoers file already exists: ${SUDOERS_FILE}${NC}"
else
  echo "Creating sudoers file: ${SUDOERS_FILE}"

  # Create sudoers file with proper permissions
  cat > "$SUDOERS_FILE" << EOF
# Allow admin user to run any command without password
# This enables automation and non-interactive tools like WinSCP
${ADMIN_USER} ALL=(ALL:ALL) NOPASSWD: ALL
EOF

  # Set correct permissions (must be 0440 or 0640)
  chmod 0440 "$SUDOERS_FILE"

  # Validate sudoers syntax
  if visudo -c -f "$SUDOERS_FILE"; then
    echo -e "${GREEN}✓ Passwordless sudo configured for '${ADMIN_USER}'${NC}"
  else
    echo -e "${RED}Error: Invalid sudoers syntax. Removing file.${NC}" >&2
    rm -f "$SUDOERS_FILE"
    exit 1
  fi
fi

# ============================================================================
# STEP 5: Configure Bash Aliases
# ============================================================================

echo -e "\n${BLUE}──── Step 5: Configuring Bash Environment ────${NC}"

BASHRC="/home/${ADMIN_USER}/.bashrc"

# Add cls alias if not already present
if grep -q "alias cls=" "$BASHRC" 2>/dev/null; then
  echo -e "${YELLOW}Bash aliases already configured${NC}"
else
  echo "Adding bash aliases to ${BASHRC}"

  cat >> "$BASHRC" << 'EOF'

# Custom aliases
alias cls='clear'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Useful Docker/Podman aliases (if/when installed)
alias dps='podman ps'
alias dpsa='podman ps -a'
alias dimg='podman images'
EOF

  # Set ownership
  chown "${ADMIN_USER}:${ADMIN_USER}" "$BASHRC"

  echo -e "${GREEN}✓ Bash aliases configured${NC}"
fi

# ============================================================================
# STEP 6: Configure SSH
# ============================================================================

echo -e "\n${BLUE}──── Step 6: Configuring SSH ────${NC}"

SSHD_CONFIG="/etc/ssh/sshd_config"

# Ensure SSH service is enabled and started
systemctl enable ssh
systemctl start ssh

echo -e "${GREEN}✓ SSH service enabled and started${NC}"

# Optional: Secure SSH configuration
echo ""
read -p "Apply secure SSH configuration? (Disable root login, password auth optional) [y/N]: " SECURE_SSH

if [[ "$SECURE_SSH" =~ ^[Yy]$ ]]; then
  echo "Applying secure SSH configuration..."

  # Backup original config
  cp "$SSHD_CONFIG" "${SSHD_CONFIG}.backup-$(date +%Y%m%d-%H%M%S)"

  # Disable root login via SSH
  if grep -q "^PermitRootLogin" "$SSHD_CONFIG"; then
    sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' "$SSHD_CONFIG"
  else
    echo "PermitRootLogin no" >> "$SSHD_CONFIG"
  fi

  echo -e "${GREEN}✓ Disabled root login via SSH${NC}"
  echo -e "${YELLOW}Note: You can still use 'sudo' after logging in as '${ADMIN_USER}'${NC}"

  # Restart SSH service (reload can fail in LXC due to socket conflicts)
  echo "Restarting SSH service..."
  if systemctl restart ssh; then
    echo -e "${GREEN}✓ SSH service restarted successfully${NC}"
  else
    echo -e "${YELLOW}⚠ SSH restart failed, but config is valid${NC}"
    echo -e "${YELLOW}  SSH will work correctly after next reboot${NC}"
  fi
fi

# ============================================================================
# STEP 7: WinSCP Configuration Info
# ============================================================================

echo -e "\n${BLUE}──── Step 7: WinSCP/SFTP Configuration ────${NC}"

echo -e "${YELLOW}For WinSCP sudo access:${NC}"
echo -e "  1. Connect to this server via WinSCP"
echo -e "  2. Login as user: ${GREEN}${ADMIN_USER}${NC}"
echo -e "  3. Go to: Advanced → Environment → SFTP"
echo -e "  4. Set SFTP server to: ${GREEN}sudo /usr/lib/openssh/sftp-server${NC}"
echo -e "  5. This allows WinSCP to access files as root via sudo"
echo ""

# ============================================================================
# STEP 8: Summary
# ============================================================================

echo -e "\n${BLUE}═══════════════════════════════════════════════════════════════${NC}"
echo -e "${GREEN}   Initialization Complete!${NC}"
echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}\n"

IP_ADDRESS=$(ip -4 addr show scope global | grep inet | awk '{print $2}' | cut -d'/' -f1 | head -1)

echo -e "${BLUE}System Information:${NC}"
echo -e "  OS:         Debian $(cat /etc/debian_version)"
echo -e "  Hostname:   $(hostname)"
if [ -n "$IP_ADDRESS" ]; then
  echo -e "  IP Address: ${YELLOW}${IP_ADDRESS}${NC}"
fi
echo ""

echo -e "${BLUE}Admin User:${NC}"
echo -e "  Username:   ${YELLOW}${ADMIN_USER}${NC}"
echo -e "  Sudo:       ${GREEN}Passwordless (configured)${NC}"
echo -e "  SSH:        ${GREEN}Enabled${NC}"
echo ""

echo -e "${BLUE}Next Steps:${NC}"
echo -e "  1. ${YELLOW}Test SSH access:${NC}"
echo -e "     ssh ${ADMIN_USER}@${IP_ADDRESS:-<ip-address>}"
echo ""
echo -e "  2. ${YELLOW}Copy remaining setup scripts to /usr/local/sbin/:${NC}"
echo -e "     - setup-enhanced-motd.sh"
echo -e "     - install-podman-cockpit.sh"
echo -e "     - create-service-user.sh"
echo -e "     - create-podman-service.sh"
echo ""
echo -e "  3. ${YELLOW}Make scripts executable:${NC}"
echo -e "     chmod +x /usr/local/sbin/*.sh"
echo ""
echo -e "  4. ${YELLOW}Run setup scripts in order:${NC}"
echo -e "     /usr/local/sbin/setup-enhanced-motd.sh"
echo -e "     /usr/local/sbin/install-podman-cockpit.sh"
echo ""

echo -e "${YELLOW}Important:${NC} Log out and log back in for all changes to take effect."
echo ""
END_OF_INIT_SCRIPT

# Make the script executable
chmod +x /usr/local/sbin/init-service-container.sh

# Display success message
echo ""
echo "================================================================"
echo "✓ init-service-container.sh has been created and made executable"
echo "================================================================"
echo ""
echo "To run the initialization script, execute:"
echo "  /usr/local/sbin/init-service-container.sh"
echo ""
